Option Explicit

Sub MakeABook()
    'Below, we will change the file names to whatever works for you. If you wanna change the name, change the corresponding entry below
    'For example, if you want your new sheet to be called "Clean Data", do this: newSheetName =  "Clean Data" (the title has to be in quotes)
    'For file name, you have to type it exactly with all spaces and THE CORRECT ending.
    Dim currentFileName As String
    Dim newSheetName As String
    Dim currentSheetName As String
    
    currentFileName = "report (1).xlsm"
    newSheetName = "Test Making New Sheet"
    currentSheetName = "data"
    
   'The bottom code is important because in the first two steps, we create a new worksheet and a new book object
   'In the "Set currentBook" part, what happens is we open and refer the the book we're using. Hence this is where we use the currentFileName
   'variable to open the book you specified earlier
   'Set newSheet into the add function gives us a new worksheet to play with
   
    Dim currentBook As Workbook
    Dim newSheet As Worksheet
    Dim dataSheet As Worksheet
    Set currentBook = Workbooks(currentFileName)
    Set newSheet = currentBook.Worksheets.Add(Type:=xlWorksheet, After:=Application.ActiveSheet)
    Set dataSheet = Worksheets(currentSheetName)
    With newSheet
        .Name = newSheetName
    End With
    
   'Cells(r,c) gets the cell at row r and column c
   'This is all hardcoded because we do not need a generalized way to get things in this project
   
    currentBook.Sheets(currentSheetName).Range("A3:B461").Copy _
    Destination:=newSheet.Range("A3:B461")
    currentBook.Sheets(currentSheetName).Range("HX3:MF461").Copy _
    Destination:=newSheet.Range("C3:DK461")
    
    
End Sub

Sub IsolateResponse()
    Dim currentFileName As String
    Dim newSheetName As String
    Dim currentSheetName As String
    
    currentFileName = "report (1).xlsm"
    newSheetName = "Isolated Responses"
    currentSheetName = "Test Making New Sheet"
   
    Dim currentBook As Workbook
    Dim responseSheet As Worksheet
    Dim dataSheet As Worksheet
    Set currentBook = Workbooks(currentFileName)
    Set dataSheet = Worksheets(currentSheetName)
    Set responseSheet = currentBook.Worksheets.Add(Type:=xlWorksheet, After:=Application.ActiveSheet)
    
    With responseSheet
        .Name = newSheetName
    End With
'Copy the whole worksheet then do the shit
    Dim word As String
    Dim responsePosition As Integer
    Dim tempPosition As Integer
    Dim endBracePosition As Integer
    Dim initResPos As Integer
    Dim cutStuff As String
    responsePosition = 1
    tempPosition = 1
    'In this stuff, the index starts at 0, not one lol
    Dim origRowNum As Integer
    Dim origColNum As Integer
    Dim rowNum As Integer
    Dim colNum As Integer
'This stuff above copies the names and things
    origRowNum = 4
    origColNum = 3
    rowNum = origRowNum
    colNum = origColNum
    Do While rowNum < 461
        Do While colNum < 113
            word = currentBook.Sheets(currentSheetName).Cells(rowNum, colNum).Value
            Cells(rowNum, colNum).Value = ""
            If InStr(1, word, """response""") > 0 Then
                Do While tempPosition > 0
                    Cells(rowNum, colNum).Value = Cells(rowNum, colNum).Value & "{"
                    responsePosition = InStr(responsePosition + 1, word, """response""")
                    endBracePosition = InStr(responsePosition + 1, word, "}")
                    Debug.Print responsePosition & " is response"
                    Debug.Print endBracePosition & " is end brace"
                    cutStuff = Mid(word, responsePosition, (endBracePosition - responsePosition + 1))
                    Cells(rowNum, colNum).Value = Cells(rowNum, colNum).Value & cutStuff
                    tempPosition = InStr(responsePosition + 1, word, """response""")
                Loop
            End If
            colNum = colNum + 1
            responsePosition = 1
            tempPosition = 1
            Loop
        rowNum = rowNum + 1
        colNum = origColNum
        Loop
    currentBook.Sheets(currentSheetName).Range("A1:B461").Copy _
    Destination:=responseSheet.Range("A1:B461")
    currentBook.Sheets(currentSheetName).Range("A3:DK3").Copy _
    Destination:=responseSheet.Range("A3:DK3")
    
End Sub

Sub ExtractTheResponses()
    Dim currentFileName As String
    Dim newSheetName As String
    Dim currentSheetName As String

    currentFileName = "report (1).xlsm"
    newSheetName = "Extracted Responses"
    currentSheetName = "Isolated Responses"

    Dim currentBook As Workbook
    Dim responseSheet As Worksheet
    Dim dataSheet As Worksheet
    Set currentBook = Workbooks(currentFileName)
    Set dataSheet = Worksheets(currentSheetName)
    Set responseSheet = currentBook.Worksheets.Add(Type:=xlWorksheet, After:=Application.ActiveSheet)

    With responseSheet
        .Name = newSheetName
    End With
'Copy the whole worksheet then do the shit
    Dim word As String
    Dim responsePosition As Integer
    Dim tempPosition As Integer
    Dim endBracePosition As Integer
    Dim initResPos As Integer
    Dim cutStuff As String
    responsePosition = 1
    tempPosition = 1
    'In this stuff, the index starts at 0, not one lol
    Dim origRowNum As Integer
    Dim origColNum As Integer
    Dim rowNum As Integer
    Dim colNum As Integer
    origRowNum = 4
    origColNum = 3
    rowNum = origRowNum
    colNum = origColNum
    Do While rowNum < 461
        Do While colNum < 113
            word = currentBook.Sheets(currentSheetName).Cells(rowNum, colNum).Value
            Cells(rowNum, colNum).Value = ""
            Debug.Print word & " at row " & rowNum & " and at col " & colNum
            If InStr(1, word, """response""") > 0 Then
                Do While tempPosition > 0
                    Cells(rowNum, colNum).Value = Cells(rowNum, colNum).Value & "{"
                    responsePosition = InStr(responsePosition + 1, word, """response""")
                    endBracePosition = InStr(responsePosition + 1, word, "}")
                    Debug.Print responsePosition & " is response"
                    Debug.Print endBracePosition & " is end brace"
                    cutStuff = Mid(word, responsePosition, (endBracePosition - responsePosition + 1))
                    Cells(rowNum, colNum).Value = Cells(rowNum, colNum).Value & cutStuff
                    tempPosition = InStr(responsePosition + 1, word, """response""")
                Loop
            End If
            colNum = colNum + 1
            responsePosition = 1
            tempPosition = 1
            Loop
        rowNum = rowNum + 1
        colNum = origColNum
        Loop

End Sub

Sub TestStuff()
    
    Dim testString As String
    Dim responsePosition As Integer
    Dim startBracePosition As Integer
    Dim endBracePosition As Integer
    Dim tempPosition As Integer
    Dim startPosition As Integer
    Dim bracePart As String
    Dim textPart As String
    Dim endResult As String
    Dim leftSquareBracket As Integer
    Dim rightSquareBracket As Integer
    Dim textPosition As Integer
    Dim tablePosition As Integer
    Dim responseWord As String
    Dim textWord As String
    Dim radioWord As String
    Dim tableWord As String
    Dim challengeWord As String
    Dim orWord As String
    Dim choicesWord As String
    Dim finalWord As String
    responseWord = """response"""
    textWord = """text"""
    radioWord = """radio"""
    tableWord = """tableinput"""
    challengeWord = """challenge"""""
    orWord = """or"""
    choicesWord = """choices"""
    responsePosition = 0
    textPosition = 0
    tablePosition = 0
    startBracePosition = 0
    endBracePosition = 1
    tempPosition = 1
    startPosition = 0
    bracePart = ""
    textPart = ""
    endResult = "'"
    finalWord = ""
'    testString = "{""response"":{""id"":""QHiT51wr1p"",""text"":""a) taste""}{""response"":{""text"":""Another method of testing for saltiness would be to......""}{""response"":{""id"":""3VczISATqq"",""text"":""a) team average""}{""response"":{""id"":""eDLtrWIAyK"",""text"":""a) 4 (best chip)""}{""response"":[""1"",""2"",""3"",""1""],""id"":""YWEyzZrkFP"",""type"":""tableinput""}"
    testString = Cells(4, 3).Value
    Debug.Print testString
    Do While tempPosition > 0
        startBracePosition = InStr(tempPosition, testString, "{")
        endBracePosition = InStr(tempPosition, testString, "}")
        tempPosition = endBracePosition + 1
        Debug.Print startBracePosition & " start " & endBracePosition & " end"
        bracePart = Mid(testString, startBracePosition, (endBracePosition - startBracePosition + 1))
        Debug.Print bracePart
        Debug.Print "de brace"
        If InStr(1, bracePart, textWord) > 0 Then
            textPosition = InStr(1, bracePart, textWord)
            endBracePosition = InStr(1, bracePart, "}")
            textPart = Mid(bracePart, textPosition + 7, (endBracePosition - textPosition - 7))
            Debug.Print textPart
        ElseIf InStr(1, testString, tableWord) > 0 Or InStr(1, testString, orWord) > 0 Or InStr(1, testString, choicesWord) Then
            leftSquareBracket = InStr(1, bracePart, "[")
            rightSquareBracket = InStr(1, bracePart, "]")
            textPart = Mid(bracePart, leftSquareBracket, (rightSquareBracket - leftSquareBracket + 1))
            Debug.Print textPart
        End If
        textPosition = 0
        tablePosition = 0
        If InStr(tempPosition, testString, "{") = 0 Then
            tempPosition = 0
        End If
        finalWord = finalWord & " + " & textPart
    Loop
    Debug.Print finalWord & " is final"
    
End Sub

